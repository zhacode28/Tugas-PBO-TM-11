/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ireport;

/**
 *
 * @author zahidahhanumalzahra
 */
import javax.swing.JOptionPane; 
import java.sql.Connection; 
import java.sql.DriverManager; 
import java.sql.PreparedStatement; 
import java.sql.SQLException; 
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
import java.util.Map;
import java.util.HashMap;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.view.JasperViewer;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.IOException;




public class Mahasiswa extends javax.swing.JFrame {

    /**
     * Creates new form HanumFrame
     */
    public Mahasiswa() {
        initComponents();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableData = new javax.swing.JTable();
        jButtonTambahData = new javax.swing.JButton();
        jButtonHapusData = new javax.swing.JButton();
        jButtonUpdateData = new javax.swing.JButton();
        jTextFieldSKS = new javax.swing.JTextField();
        jTextFieldKodeMK = new javax.swing.JTextField();
        jTextFieldMataKuliah = new javax.swing.JTextField();
        jLabelKodeMK = new javax.swing.JLabel();
        jLabelSKS = new javax.swing.JLabel();
        jLabelMataKuliah = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabelSemesterAjar = new javax.swing.JLabel();
        jTextFieldSemesterAjar = new javax.swing.JTextField();
        jButtonCetak = new javax.swing.JButton();
        jButtonUpload = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableData);

        jButtonTambahData.setText("Tambah");
        jButtonTambahData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTambahDataActionPerformed(evt);
            }
        });

        jButtonHapusData.setText("Hapus");
        jButtonHapusData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHapusDataActionPerformed(evt);
            }
        });

        jButtonUpdateData.setText("Update");
        jButtonUpdateData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateDataActionPerformed(evt);
            }
        });

        jLabelKodeMK.setText("Kode Mata Kuliah");

        jLabelSKS.setText("SKS");

        jLabelMataKuliah.setText("Nama Mata Kuliah");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel4.setText("Mata Kuliah");

        jLabelSemesterAjar.setText("Semester Ajar");

        jTextFieldSemesterAjar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSemesterAjarActionPerformed(evt);
            }
        });

        jButtonCetak.setText("Cetak");
        jButtonCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCetakActionPerformed(evt);
            }
        });

        jButtonUpload.setText("Upload");
        jButtonUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUploadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelKodeMK)
                                    .addComponent(jLabelSKS)
                                    .addComponent(jLabelMataKuliah)
                                    .addComponent(jLabelSemesterAjar))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldSKS, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                                    .addComponent(jTextFieldKodeMK)
                                    .addComponent(jTextFieldMataKuliah)
                                    .addComponent(jTextFieldSemesterAjar)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jButtonTambahData)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonUpdateData)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonHapusData)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(99, 99, 99))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jButtonCetak)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonUpload)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelKodeMK)
                            .addComponent(jTextFieldKodeMK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelSKS)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelMataKuliah)
                                    .addComponent(jTextFieldMataKuliah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelSemesterAjar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldSemesterAjar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jTextFieldSKS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonTambahData)
                            .addComponent(jButtonUpdateData)
                            .addComponent(jButtonHapusData))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonCetak)
                            .addComponent(jButtonUpload))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                        .addGap(70, 70, 70))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadData() {
    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
    String url = "jdbc:postgresql://localhost:5432/UTS PBO"; 
    String user = "postgres"; 
    String password = "197300"; 
    conn = DriverManager.getConnection(url, user, password);


    String sql = "SELECT * FROM MataKuliah"; 
    ps = conn.prepareStatement(sql);
    rs = ps.executeQuery();


    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("KodeMK");
    model.addColumn("SKS");
    model.addColumn("NamaMK");
    model.addColumn("SemesterAjar"); 

    while (rs.next()) {
        model.addRow(new Object[] {
            rs.getString("KodeMK"),      
            rs.getInt("SKS"),           
            rs.getString("NamaMK"),      
            rs.getInt("SemesterAjar")  
        });
        jTableData.setModel(model);
    }


} catch (SQLException e) {
    JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
} finally {
    try {
        if (rs != null) rs.close();
        if (ps != null) ps.close();
        if (conn != null) conn.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
    }
}

    
    private void jButtonHapusDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHapusDataActionPerformed
                                                       
    String kodeMK = jTextFieldKodeMK.getText();

    if (kodeMK.isEmpty()) {
    JOptionPane.showMessageDialog(this, "Kode MK harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
    return;
    }
    Connection conn = null;
    PreparedStatement ps = null;

    try {

        String url = "jdbc:postgresql://localhost:5432/UTS PBO";
        String user = "postgres"; 
        String password = "197300"; 
        conn = DriverManager.getConnection(url, user, password);

       String sql = "DELETE FROM Matakuliah WHERE KodeMK = ?";
        ps = conn.prepareStatement(sql);
        ps.setInt(1, Integer.parseInt(kodeMK));

   
        int rowsAffected = ps.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
        } else {
            JOptionPane.showMessageDialog(this, "KodeMK tidak ditemukan, tidak ada data yang dihapus.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (ps != null) ps.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    
}
     loadData();

    }//GEN-LAST:event_jButtonHapusDataActionPerformed

    private void jButtonTambahDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTambahDataActionPerformed
                                                                                             
    
    String kodeMK = jTextFieldKodeMK.getText();
    String namaMK = jTextFieldMataKuliah.getText();
    String sks = jTextFieldSKS.getText();
    String semesterAjar = jTextFieldSemesterAjar.getText();



    if (kodeMK.isEmpty() || namaMK.isEmpty() || sks.isEmpty() || semesterAjar.isEmpty()) {
    JOptionPane.showMessageDialog(this, "Semua field harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
    return;
    }

    Connection conn = null;
    PreparedStatement ps = null;

    try {

        String url = "jdbc:postgresql://localhost:5432/UTS PBO"; 
        String user = "postgres"; 
        String password = "197300"; 
        conn = DriverManager.getConnection(url, user, password);


        String sql = "INSERT INTO MataKuliah (KodeMK, SKS, NamaMK, SemesterAjar) VALUES (?, ?, ?, ?)";
        ps = conn.prepareStatement(sql);
        ps.setInt(1, Integer.parseInt(kodeMK)); 
        ps.setInt(2, Integer.parseInt(sks));
        ps.setString(3, namaMK);
        ps.setInt(4, Integer.parseInt(semesterAjar)); 
        
        ps.executeUpdate();
        

        JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan!");
        

        jTextFieldKodeMK.setText("");
        jTextFieldSKS.setText("");
        jTextFieldMataKuliah.setText("");
        jTextFieldSemesterAjar.setText("");


        loadData();
        
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (ps != null) ps.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    }//GEN-LAST:event_jButtonTambahDataActionPerformed

    private void jButtonUpdateDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateDataActionPerformed
                                                  

    String kodeMK = jTextFieldKodeMK.getText();
    String namaMK = jTextFieldMataKuliah.getText();
    String sks = jTextFieldSKS.getText();
    String semesterAjar = jTextFieldSemesterAjar.getText();


    

     if (kodeMK.isEmpty() || namaMK.isEmpty() || sks.isEmpty() || semesterAjar.isEmpty()) {
    JOptionPane.showMessageDialog(this, "Semua field harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

    
    Connection conn = null;
    PreparedStatement ps = null;

    try {

        String url = "jdbc:postgresql://localhost:5432/UTS PBO"; 
        String user = "postgres"; 
        String password = "197300"; 
        conn = DriverManager.getConnection(url, user, password);

        
        String sql = "UPDATE MataKuliah SET NamaMK = ?, SKS = ?, SemesterAjar = ? WHERE KodeMK = ?";
        ps = conn.prepareStatement(sql);
        ps.setString(1, namaMK);
        ps.setInt(2, Integer.parseInt(sks)); 
        ps.setInt(3, Integer.parseInt(semesterAjar)); 
        ps.setInt(4, Integer.parseInt(kodeMK)); 


        

         int rowsUpdated = ps.executeUpdate();


        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Data berhasil diperbarui!");
        } else {
            JOptionPane.showMessageDialog(this, "Kode MK tidak ditemukan, tidak ada data yang diperbarui.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        

        jTextFieldKodeMK.setText("");
        jTextFieldSKS.setText("");
        jTextFieldMataKuliah.setText("");
        jTextFieldSemesterAjar.setText("");

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (ps != null) ps.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
            loadData();               

    }//GEN-LAST:event_jButtonUpdateDataActionPerformed

    private void jTextFieldSemesterAjarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSemesterAjarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSemesterAjarActionPerformed

    private void jButtonCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCetakActionPerformed
         try {
        // Path ke file laporan Jasper (ganti dengan lokasi file Anda)
        String reportPath = "src/KartuRencanaStudi.jasper";

        // Parameter koneksi database PostgreSQL
        String dbUrl = "jdbc:postgresql://localhost:5432/UTS PBO";
        String dbUser = "postgres";
        String dbPassword = "197300";

        // Membuat koneksi ke database
        Connection conn = DriverManager.getConnection(dbUrl, dbUser, dbPassword);

        // Mengisi parameter laporan jika ada
        Map<String, Object> parameters = new HashMap<>();

        // Mengisi laporan dengan data dari database
        JasperPrint print = JasperFillManager.fillReport(reportPath, parameters, conn);

        // Menampilkan laporan dengan JasperViewer
        JasperViewer viewer = new JasperViewer(print, false);
        viewer.setTitle("Kartu Rencana Studi");
        viewer.setVisible(true);
        
    } catch (SQLException | JRException e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButtonCetakActionPerformed

    private void jButtonUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUploadActionPerformed
         JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        int returnValue = jfc.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File filePilihan = jfc.getSelectedFile();
            System.out.println("yang dipilih : " + filePilihan.getAbsolutePath());
            try {
                BufferedReader br = new BufferedReader(new FileReader(filePilihan));
                String baris;
                String pemisah = ";";
                while ((baris = br.readLine()) != null) {
                    String[] dataMK = baris.split(pemisah);
                    if (dataMK.length >= 4) {
                        int kodemk = Integer.parseInt(dataMK[0].trim());
                        int sks = Integer.parseInt(dataMK[1].trim());
                        String namamk = dataMK[2].trim();
                        int semesterajar = Integer.parseInt(dataMK[3].trim());

                        Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/UTS PBO", "postgres", "197300");
                        int k = masukkanData(conn, kodemk, sks, namamk, semesterajar);
                        if (k > 0) {
                            loadData();
                            peringatan("Simpan Berhasil");
                        } else {
                            peringatan("Simpan Gagal");
                        }
                    }
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Mahasiswa.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Mahasiswa.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(Mahasiswa.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonUploadActionPerformed

    
    private int masukkanData(Connection conn, int kodemk, int sks, String namamk, int semesterajar) throws SQLException {
        String sql = "INSERT INTO matakuliah (kodemk, sks, namamk, semesterajar) VALUES (?, ?, ?, ?)";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, kodemk);
            stmt.setInt(2, sks);
            stmt.setString(3, namamk);
            stmt.setInt(4, semesterajar);
            return stmt.executeUpdate();
        }
    }

    private void tampil(Connection conn) {
        // Logika untuk menampilkan data jika diperlukan
    }

    private void peringatan(String pesan) {
        javax.swing.JOptionPane.showMessageDialog(null, pesan);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mahasiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mahasiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mahasiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mahasiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Mahasiswa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCetak;
    private javax.swing.JButton jButtonHapusData;
    private javax.swing.JButton jButtonTambahData;
    private javax.swing.JButton jButtonUpdateData;
    private javax.swing.JButton jButtonUpload;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelKodeMK;
    private javax.swing.JLabel jLabelMataKuliah;
    private javax.swing.JLabel jLabelSKS;
    private javax.swing.JLabel jLabelSemesterAjar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableData;
    private javax.swing.JTextField jTextFieldKodeMK;
    private javax.swing.JTextField jTextFieldMataKuliah;
    private javax.swing.JTextField jTextFieldSKS;
    private javax.swing.JTextField jTextFieldSemesterAjar;
    // End of variables declaration//GEN-END:variables
}
